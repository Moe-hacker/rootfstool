#!/usr/bin/env bash
# SPDX-License-Identifier: Apache-2.0
# This file is part of rootfstool
#
# Copyright (c) 2023 Moe-hacker
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# 跟着沨鸾学shell，学到最后只会喵喵喵
# (学完C发现shell都快不会写了，大草)
RGB_MAIN_COLOR="254;228;208"
MAIN_COLOR="\033[1;38;2;${RGB_MAIN_COLOR}m"
LXC_MIRROR_MAIN="http://images.linuxcontainers.org/images"
LXC_MIRROR_BFSU="https://mirrors.bfsu.edu.cn/lxc-images/images"
function format_html() {
  # Format html to text and filter out valid information.
  # Modified from tmoe.
  if [[ ${LXC_MIRROR} == "bfsu" ]]; then
    echo "$*" | grep "href" | grep "title" | sed -E 's@<a (href)@\n\1@g' | awk -F 'href=' '{print $2}' | cut -d '"' -f 2 | cut -d "/" -f 1 | grep -v '\.\.' | grep -v "&amp;"
  else
    echo "$*" | grep "href" | sed -E 's@<a (href)@\n\1@g' | awk -F 'href=' '{print $2}' | cut -d '"' -f 2 | cut -d "/" -f 1 | grep -v '\.\.'
  fi
}
function show_helps() {
  echo -e "${MAIN_COLOR}Usage:"
  echo -e "  rootfstool <command> [<args>]"
}
function show_version_info() {
  echo -e "${MAIN_COLOR}rootfstool version v0.0-dev"
}
function get_cpu_arch() {
  # It will create a global variable CPU_ARCH.
  # From tmoe.
  if [[ $(command -v dpkg) && $(command -v apt-get) ]]; then
    DPKG_ARCH=$(dpkg --print-architecture)
    case ${DPKG_ARCH} in
    armel) ARCH_TYPE="armel" ;;
    armv7* | armv8l | armhf | arm) ARCH_TYPE="armhf" ;;
    aarch64 | arm64* | armv8* | arm*) ARCH_TYPE="arm64" ;;
    i*86 | x86) ARCH_TYPE="i386" ;;
    x86_64 | amd64) ARCH_TYPE="amd64" ;;
    *) ARCH_TYPE=${DPKG_ARCH} ;;
    esac
  else
    UNAME_ARCH=$(uname -m)
    case ${UNAME_ARCH} in
    armv7* | armv8l) ARCH_TYPE="armhf" ;;
    armv[1-6]*) ARCH_TYPE="armel" ;;
    aarch64 | armv8* | arm64 | arm*) ARCH_TYPE="arm64" ;;
    x86_64 | amd64) ARCH_TYPE="amd64" ;;
    i*86 | x86) ARCH_TYPE="i386" ;;
    s390*) ARCH_TYPE="s390x" ;;
    ppc*) ARCH_TYPE="ppc64el" ;;
    mips64) ARCH_TYPE="mips64el" ;;
    mips*) ARCH_TYPE="mipsel" ;;
    risc*) ARCH_TYPE="riscv64" ;;
    *) ARCH_TYPE=${UNAME_ARCH} ;;
    esac
  fi
  export CPU_ARCH=${ARCH_TYPE}
}
function list_lxc_distros() {
  # It will print the distro name if any version of distro is available for current cpu arch.
  # $LXC_MIRROR and $CPU_ARCH are defined at main()
  if [[ ${CPU_ARCH} == "" ]]; then
    get_cpu_arch
  fi
  export LXC_MIRROR=${LXC_MIRROR}
  if [[ ${LXC_MIRROR} == "bfsu" ]]; then
    MIRROR=${LXC_MIRROR_BFSU}
  else
    MIRROR=${LXC_MIRROR_MAIN}
  fi
  for DISTRO in $(format_html $(curl -sL ${MIRROR})); do
    for VERSION in $(format_html $(curl -sL ${MIRROR}/$DISTRO)); do
      if [[ $(curl -sL ${MIRROR}/${DISTRO}/${VERSION}/${CPU_ARCH} | grep "404 Not Found") = "" ]]; then
        echo -e "${MAIN_COLOR}${DISTRO}"
        break
      else
        continue
      fi
    done
  done
  printf "\033[0m"
}
function list_distro_version() {
  # $LXC_MIRROR, $DISTRO and $CPU_ARCH are defined at main()
  if [[ ${DISTRO} == "" ]]; then
    echo -e "\033[31mOS distro not set.\033[0m"
    exit 1
  fi
  if [[ ${CPU_ARCH} == "" ]]; then
    get_cpu_arch
  fi
  export LXC_MIRROR=${LXC_MIRROR}
  if [[ ${LXC_MIRROR} == "bfsu" ]]; then
    MIRROR=${LXC_MIRROR_BFSU}
  else
    MIRROR=${LXC_MIRROR_MAIN}
  fi
  if [[ $(curl -sL ${MIRROR}/${DISTRO} | grep "404 Not Found") != "" ]]; then
    echo -e "\033[31mOS distro not found.\033[0m"
    exit 1
  fi
  for VERSION in $(format_html $(curl -sL ${MIRROR}/${DISTRO})); do
    if [[ $(curl -sL ${MIRROR}/${DISTRO}/${VERSION}/${CPU_ARCH} | grep "404 Not Found") = "" ]]; then
      VERSION_FOUND=1
      echo -e "${MAIN_COLOR}${DISTRO} [${CPU_ARCH}] : ${VERSION}"
    fi
  done
  if [[ ${VERSION_FOUND} != 1 ]]; then
    echo -e "\033[31mCould not found image for current cpu architecture.\033[0m"
    exit 1
  fi
  printf "\033[0m"
}
function get_rootfs_url() {
  # $LXC_MIRROR, $DISTRO, $VERSION and $CPU_ARCH are defined at main()
  if [[ ${CPU_ARCH} == "" ]]; then
    get_cpu_arch
  fi
  export LXC_MIRROR=${LXC_MIRROR}
  if [[ ${LXC_MIRROR} == "bfsu" ]]; then
    MIRROR=${LXC_MIRROR_BFSU}
  else
    MIRROR=${LXC_MIRROR_MAIN}
  fi
  if [[ ${DISTRO} = "gentoo" ]]; then
    VERSION2="openrc"
  else
    VERSION2="default"
  fi
  TIME=$(format_html $(curl -sL ${MIRROR}/${DISTRO}/${VERSION}/${CPU_ARCH}/${VERSION2}) | tail -n1)
  if [[ ${TIME} = "" ]]; then
    echo -e "\033[31mError: Can not find rootfs !\033[0m"
    exit 1
  fi
  URL=${MIRROR}/${DISTRO}/${VERSION}/${CPU_ARCH}/${VERSION2}/${TIME}/rootfs.tar.xz
  echo ${URL}
}
function exec_function() {
  # *Only for developer.
  "$@"
}
function main() {
  case $1 in
  "exec" | "e")
    shift
    exec_function "$@"
    exit 0
    ;;
  "version" | "v")
    show_version_info
    exit 0
    ;;
  "help" | "h")
    show_helps
    exit 0
    ;;
  "list" | "l")
    TO_EXEC="list_lxc_distros"
    ;;
  "search" | "s")
    TO_EXEC="list_distro_version"
    ;;
  "url" | "u")
    TO_EXEC="get_rootfs_url"
    ;;
  esac
  shift
  while [[ $1 ]]; do
    case $1 in
    "--distro" | "-d")
      shift
      export DISTRO=$1
      ;;
    "--arch" | "-a")
      shift
      export CPU_ARCH=$1
      ;;
    "--version" | "-v")
      shift
      export VERSION=$1
      ;;
    "--mirror" | "-m")
      shift
      export LXC_MIRROR=$1
      ;;
    esac
    shift
  done
  ${TO_EXEC}
}
main "$@"
